/*
 * File: app/view/UserFingerWin.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.UserFingerWin', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.toolbar.Toolbar',
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio',
        'Ext.tab.Panel',
        'Ext.grid.Panel',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.selection.CheckboxModel',
        'Ext.tab.Tab'
    ],

    height: 523,
    width: 703,
    resizable: false,
    layout: 'border',
    title: '指纹管理',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'icon-add',
                            text: '采集',
                            listeners: {
                                click: {
                                    fn: me.onRevFingerClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonFingerAfterRender,
                                    single: true,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-del',
                            text: '删除',
                            listeners: {
                                click: {
                                    fn: me.onButtonDelClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonDelAfterRender,
                                    single: true,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-save',
                            text: '保存',
                            listeners: {
                                click: {
                                    fn: me.onBtnSaveClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onSaveAfterRender,
                                    single: true,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'form',
                    region: 'north',
                    layout: 'column',
                    bodyPadding: 10,
                    header: false,
                    title: '表单',
                    items: [
                        {
                            xtype: 'combobox',
                            padding: 5,
                            width: 200,
                            fieldLabel: '指纹设备',
                            labelAlign: 'right',
                            name: 'fingerDev',
                            allowBlank: false,
                            editable: false,
                            valueField: 'id',
                            listeners: {
                                afterrender: {
                                    fn: me.onFingerDevAfterRender,
                                    scope: me
                                },
                                beforerender: {
                                    fn: me.onFingerDevBeforeRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            padding: 5,
                            width: 200,
                            fieldLabel: '指纹编号',
                            labelAlign: 'right',
                            name: 'fingerNum',
                            allowBlank: false,
                            editable: false,
                            displayField: 'fingerNumStr',
                            valueField: 'id',
                            listeners: {
                                afterrender: {
                                    fn: me.onFingerNumAfterRender,
                                    single: true,
                                    scope: me
                                },
                                beforerender: {
                                    fn: me.onFingerNumBeforeRender,
                                    single: true,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiogroup',
                            padding: 5,
                            width: 200,
                            fieldLabel: '胁迫指纹',
                            labelAlign: 'right',
                            items: [
                                {
                                    xtype: 'radiofield',
                                    name: 'strees',
                                    boxLabel: '否',
                                    checked: true,
                                    inputValue: 'false'
                                },
                                {
                                    xtype: 'radiofield',
                                    name: 'strees',
                                    boxLabel: '是',
                                    inputValue: 'true'
                                }
                            ]
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFormAfterRender,
                            single: true,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'tabpanel',
                    region: 'center',
                    activeTab: 0,
                    items: [
                        {
                            xtype: 'panel',
                            title: '已保存指纹',
                            items: [
                                {
                                    xtype: 'gridpanel',
                                    height: 150,
                                    autoScroll: true,
                                    header: false,
                                    title: '采集指纹',
                                    forceFit: true,
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if(value==='L0'){
                                                    return "左手大拇指";
                                                }else if(value==='L1'){
                                                    return "左手食指";
                                                }else if(value==='L2'){
                                                    return "左手中指";
                                                }else if(value==='L3'){
                                                    return "左手无名指";
                                                }else if(value==='L4'){
                                                    return "左手小指";
                                                }else if(value==='R0'){
                                                    return "右手大拇指";
                                                }else if(value==='R1'){
                                                    return "右手食指";
                                                }else if(value==='R2'){
                                                    return "右手中指";
                                                }else if(value==='R3'){
                                                    return "右手无名指";
                                                }else if(value==='R4'){
                                                    return "右手小指";
                                                }else{
                                                    return value;
                                                }
                                            },
                                            dataIndex: 'fingerNum',
                                            text: '指纹编号'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                return me.devcode2name(value);
                                            },
                                            dataIndex: 'fingerDev',
                                            text: '指纹设备'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if(value===true){
                                                    return "是";
                                                }else if(value===false){
                                                    return "否";
                                                }else{
                                                    return value;
                                                }
                                            },
                                            dataIndex: 'stress',
                                            hideable: false,
                                            text: '是否胁迫'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'createTimeStr',
                                            text: '采集时间'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            dataIndex: 'updateTimeStr',
                                            text: '更新时间'
                                        }
                                    ],
                                    selModel: Ext.create('Ext.selection.CheckboxModel', {

                                    }),
                                    listeners: {
                                        afterrender: {
                                            fn: me.onGridpanelAfterRender,
                                            scope: me
                                        },
                                        selectionchange: {
                                            fn: me.onGridpanelSelectionChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'gridpanel',
                                    autoScroll: true,
                                    title: '正在采集',
                                    columns: [
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                return me.fingerCode2Name(value);
                                            },
                                            dataIndex: 'fingerNum',
                                            text: '指纹编号'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                return me.devcode2name(value);
                                            },
                                            dataIndex: 'fingerDev',
                                            text: '指纹设备'
                                        },
                                        {
                                            xtype: 'gridcolumn',
                                            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                                if(value==='true'){
                                                    return "是";
                                                }else if(value==='false'){
                                                    return "否";
                                                }else{
                                                    return value;
                                                }
                                            },
                                            dataIndex: 'stress',
                                            text: '是否胁迫'
                                        }
                                    ],
                                    selModel: Ext.create('Ext.selection.CheckboxModel', {

                                    }),
                                    listeners: {
                                        afterrender: {
                                            fn: me.onWaitAfterRender1,
                                            single: true,
                                            scope: me
                                        },
                                        selectionchange: {
                                            fn: me.onGridpanelSelectionChange1,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        beforerender: {
                            fn: me.onTabpanelBeforeRender,
                            single: true,
                            scope: me
                        }
                    }
                }
            ],
            listeners: {
                close: {
                    fn: me.onWindowClose,
                    scope: me
                },
                afterrender: {
                    fn: me.onWindowAfterRender,
                    single: true,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onRevFingerClick: function(button, e, eOpts) {
        var me= this;

        //debug
        //me.setFingerItem('L0','0','123456789','false');

        if(!me.checkForm()){
            return;
        }
        var streesVal = this.form.getForm().findField("strees").getGroupValue();
        var fingerNumVal = this.form.getForm().findField('fingerNum').getValue();
        var fingerDev = this.form.getForm().findField('fingerDev').getValue();
        var fingerData = finger.getFingerData(fingerDev);
        if(fingerData != "-1")
        {

            var tmp;
            if(me.tempCache){
                tmp = me.tempCache;
            }else{
                tmp = [];
                 me.tempCache = tmp;
            }
            var newRow={};
            newRow.fingerDev = fingerDev;
            newRow.fingerNum = fingerNumVal;
            newRow.stress = streesVal;
            newRow.fingerData = fingerData;
            tmp.push(newRow);


            Common.loadLocalStore({
                component:me.fingerWaitSave,
                fields:['fingerNum','fingerDev','stress','fingerData'],
                data:tmp
            });

        }
        else
        {
            Ext.Msg.alert({
                title : '指纹采集提示',
                msg : "指纹模板获取失败！",
                buttons : Ext.Msg.OK,
                icon : Ext.Msg.WARNING
            });
        }
    },

    onButtonFingerAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/system/user/fingerSave'},component:component});
    },

    onButtonDelClick: function(button, e, eOpts) {
        try{
            var me = this;
            var selected = me.fingerListPanel.getSelectionModel().selected;
            var selecteditems = selected.items;
            var selectedTemp = me.fingerWaitSave.getSelectionModel().selected;
            var temp2beDeleteItems =  selectedTemp.items;
            if (selecteditems.length === 0&&temp2beDeleteItems.length===0)
            {
                Ext.Msg.show(
                    {
                        title : "操作提示",
                        msg : "请选择要删除的用户指纹!",
                        buttons : Ext.Msg.OK,
                        icon : Ext.Msg.WARNING
                    });
                return;
            }
            if(selecteditems.length>0){
                var ids = [];
                Ext.each(selecteditems, function()
                     {
                         var nd = this;
                         ids.push(nd.data.id);
                     });
                    Ext.Msg.confirm("确认提示", "确定要删除选中的已保存用户指纹吗？", function(button)
                            {
                                if (button == "yes")
                                {
                                    try
                                    {
                                        Common.ajax({
                                            component : me.fingerListPanel,
                                            params : {
                                                'id' : ids.join(",")
                                            },
                                            message : '正在删除选中的用户指纹...',
                                            url : ctxp+'/system/user/fingerRemove',
                                            callback : function(result)
                                            {
                                                me.loadGridData(me.userid);
                                                Ext.Msg.alert('操作提示','用户指纹删除成功!');
                                            }
                                        });
                                    }
                                    catch (error)
                                    {
                                        Common.show({title:'操作提示',html:error.toString()});
                                    }
                                }
                            });
            }
            if(temp2beDeleteItems.length>0){
                Ext.Msg.confirm("确认提示", "确定要删除选中的已采集用户指纹吗？", function(button){
                   if(button=='yes'){
                       Ext.each(temp2beDeleteItems,function(){
                           var toBeDelete = this;
                           me.tempCache.splice(toBeDelete.index,1) ;

                        });
                        Common.loadLocalStore({
                                component:me.fingerWaitSave,
                                fields:['fingerNum','fingerDev','stress','fingerData'],
                                data:me.tempCache
                            });
                   }
                });

            }
        }
        catch (error)
        {
            Common.show({title:'操作提示',html:error.toString()});
        }
    },

    onButtonDelAfterRender: function(component, eOpts) {
        this.btnDel = component;
        Common.hidden({params : {url:'/system/user/fingerRemove'},component:component});
    },

    onBtnSaveClick: function(button, e, eOpts) {
        var me=this;
        if(!me.tempCache||me.tempCache.length===0){
            Ext.Msg.alert("指纹采集提示","没有指纹数据，不需保存！");
            return;
        }
        try{
            Common.ajax({
                message:'正在提交...',
                url:ctxp+'/system/user/fingerSave',
                params:{
                    'userId':me.userid,
                    'fingerArr':Ext.encode(me.tempCache)
                },
                callback:function(json,options,success,response)
                {
                    try{
                        if(json.success){
                            Ext.Msg.alert("指纹保存提示","指纹保存成功！");
                            me.tempCache.length=0;
                            Common.loadLocalStore({
                                component:me.fingerWaitSave,
                                fields:['fingerNum','fingerDev','stress','fingerData'],
                                data:me.tempCache
                            });
                            me.loadGridData(me.userid);
                        }else{
                            Ext.Msg.alert("指纹保存提示","指纹保存失败！"+json.msg);
                        }
                    }catch(e){}

                }
            });
        }catch(error){
            Ext.Msg.alert({
                title : '指纹保存提示',
                msg : "指纹保存失败！",
                buttons : Ext.Msg.OK,
                icon : Ext.Msg.WARNING
            });
        }

    },

    onSaveAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/system/user/fingerSave'},component:component});
    },

    onFingerDevAfterRender: function(component, eOpts) {
        var me = this;
        Common.ajax({
            url:ctxp + '/system/user/fingerItemList',
            callback:function(res){
                try{
                    me.form.getForm().findField('fingerDev').setValue(res.rows[0].id);
                }catch(ex){}
            }
        });
        Common.loadStore({
            component:component,
            url:ctxp + '/system/user/fingerItemList',
            fields:['id','text'],
            params:''
        });

    },

    onFingerDevBeforeRender: function(component, eOpts) {
        this.fingerDev = component;
    },

    onFingerNumAfterRender: function(component, eOpts) {
        var store = Ext.create('Ext.data.Store', {
            fields:['id','fingerNumStr'],
            data : [{id:'',fingerNumStr: ''},
                    {id:'L0',fingerNumStr: '左手大拇指'},
                    {id:'L1',fingerNumStr: '左手食指'},
                    {id:'L2',fingerNumStr: '左手中指'},
                    {id:'L3',fingerNumStr: '左手无名指'},
                    {id:'L4',fingerNumStr: '左手小指'},
                    {id:'R0',fingerNumStr: '右手大拇指'},
                    {id:'R1',fingerNumStr: '右手食指'},
                    {id:'R2',fingerNumStr: '右手中指'},
                    {id:'R3',fingerNumStr: '右手无名指'},
                    {id:'R4',fingerNumStr: '右手小指'}]
        });
        component.bindStore(store);
        component.setValue('L0');
    },

    onFingerNumBeforeRender: function(component, eOpts) {
        this.fingerNum = component;
    },

    onFormAfterRender: function(component, eOpts) {
        this.form = component;

    },

    onGridpanelAfterRender: function(component, eOpts) {
        this.fingerListPanel = component;
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        this.btnDel.setDisabled(selected.length < 1&&
                                this.fingerWaitSave.getSelectionModel().selected.length<1);
    },

    onWaitAfterRender1: function(component, eOpts) {
        this.fingerWaitSave = component;
    },

    onGridpanelSelectionChange1: function(model, selected, eOpts) {
        this.btnDel.setDisabled(selected.length < 1&&
                                this.fingerListPanel.getSelectionModel().selected.length<1);
    },

    onTabpanelBeforeRender: function(component, eOpts) {
        this.mypanel = component;
    },

    onWindowClose: function(panel, eOpts) {
        var me = this;
        if(!Ext.isEmpty(me.getPdaFinger))
        {
            ocxComm.remove(me.getPdaFinger);
        }
    },

    onWindowAfterRender: function(component, eOpts) {
        var me = this;
        try{
            me.getPdaFinger = {
                id:'getPdaFinger',
                callback:function(hexString){
                    if(!me.checkForm()){
                        return;
                    }
                    var streesVal = me.form.getForm().findField("strees").getGroupValue();
                    var fingerNumVal = me.form.getForm().findField('fingerNum').getValue();
                    var fingerDev = me.form.getForm().findField('fingerDev').getValue();
                    var fingerData = finger.getFingerData(fingerDev);
                    Common.ajax({
                        url:ctxp+'/home/cash/createOxC9',
                        params:{'hexString':hexString,
                                'strees':streesVal,
                                'fingerDev' : fingerDev,
                                'fingerNum':fingerNumVal,
                                'userid':me.userid
                               },
                        callback:function(res){
                            if(!Ext.isEmpty(res.rows))
                            {
                                ocxComm.send(res.rows.frame.hexString);
                                if(res.rows.fingerdata){
                                    var tmp;
                                    if(me.tempCache){
                                        tmp = me.tempCache;
                                    }else{
                                        tmp = [];
                                        me.tempCache = tmp;
                                    }
                                    var newRow={};
                                    newRow.fingerDev = fingerDev;
                                    newRow.fingerNum = fingerNumVal;
                                    newRow.stress = streesVal;
                                    newRow.fingerData = res.rows.fingerdata;
                                    tmp.push(newRow);
                                    Common.loadLocalStore({
                                        component:me.fingerWaitSave,
                                        fields:['fingerNum','fingerDev','stress','fingerData'],
                                        data:tmp
                                    });
                                }

                            }
                            if(!Ext.isEmpty(res.msg))
                            {
                                //ocxComm.remove(me.getPdaFinger);
                                //me.loadGridData(me.userid);
                                Common.alert(
                                    {
                                        title : "指纹采集提示",
                                        msg : res.msg,
                                        icon : Ext.Msg.WARNING
                                    });
                            }
                        }
                    });
                    //me.loadGridData(me.userid);
                }
            };
            ocxComm.add(me.getPdaFinger);
        }catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }

    },

    loadData: function(userid) {
        var me = this;
        //me.form.getForm().findField('fingerDev').setValue(1);
        //me.form.getForm().findField('fingerDev').setReadOnly(true);
        me.userid=userid;
        me.loadGridData(userid);
    },

    checkForm: function() {
        try{
            /*var tmp = this.form.getForm().findField('fingerDev').getValue();
            if(Ext.isEmpty(tmp) || Ext.String.trim(tmp)===''){
                Ext.Msg.alert('信息提示', '请选择指纹设备！');
                return false;
            }*/
            var tmp = this.form.getForm().findField('fingerNum').getValue();
            if(Ext.isEmpty(tmp) ||Ext.String.trim(tmp)===''){
                Common.alert(
                    {
                        msg : '请选择指纹编号',
                        icon : Ext.Msg.WARNING
                    });
                return false;
            }

            return true;
        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    loadGridData: function(userid) {
        var me = this;
        var params = {
            userid:userid
        };
        try{

            Common.loadStore({
                component:me.fingerListPanel,
                url:ctxp + '/system/user/fingerList',
                fields: ['id','fingerNum','fingerDev', 'stress', 'createTimeStr','updateTimeStr'],
                params:params
            });

        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    fingerCode2Name: function(value) {
         if(value==='L0'){
             return "左手大拇指";
         }else if(value==='L1'){
             return "左手食指";
         }else if(value==='L2'){
             return "左手中指";
         }else if(value==='L3'){
             return "左手无名指";
         }else if(value==='L4'){
             return "左手小指";
         }else if(value==='R0'){
             return "右手大拇指";
         }else if(value==='R1'){
             return "右手食指";
         }else if(value==='R2'){
             return "右手中指";
         }else if(value==='R3'){
             return "右手无名指";
         }else if(value==='R4'){
             return "右手小指";
         }else{
             return value;
         }
    },

    devcode2name: function(val) {
        var value=val+'';
        if(value==='1'){
            return "天诚";
        }else if(value==='2'){
            return "中正";
        }else if(value==='3'){
            return "维尔";
        }else if(value==='4'){
            return "中正中行";
        }else if(value==='5'){
            return "耀阳";
        }else{
            return val;
        }
    }

});