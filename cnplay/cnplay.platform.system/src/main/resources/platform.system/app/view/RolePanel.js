/*
 * File: app/view/RolePanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.RolePanel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.RolePanel',

    requires: [
        'Ext.grid.column.CheckColumn',
        'Ext.grid.column.Number',
        'Ext.grid.View',
        'Ext.selection.CheckboxModel',
        'Ext.form.Panel',
        'Ext.button.Button',
        'Ext.toolbar.Paging',
        'Ext.form.field.ComboBox'
    ],

    title: '角色管理',
    forceFit: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            listeners: {
                selectionchange: {
                    fn: me.onGridpanelSelectionChange,
                    scope: me
                },
                afterrender: {
                    fn: me.onGridpanelAfterRender,
                    scope: me
                }
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    defaultWidth: 150,
                    dataIndex: 'name',
                    text: '角色名称'
                },
                {
                    xtype: 'checkcolumn',
                    width: 60,
                    dataIndex: 'subFlag',
                    text: '下级可选'
                },
                {
                    xtype: 'numbercolumn',
                    width: 60,
                    dataIndex: 'sort',
                    text: '排列顺序',
                    format: '0'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'createTimeStr',
                    text: '创建时间'
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    dataIndex: 'updateTimeStr',
                    text: '最后更新'
                }
            ],
            selModel: Ext.create('Ext.selection.CheckboxModel', {

            }),
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'form',
                            border: false,
                            height: 21,
                            layout: 'auto',
                            header: false,
                            title: '查询表单',
                            items: [
                                {
                                    xtype: 'textfield',
                                    fieldLabel: '角色名称',
                                    labelAlign: 'right',
                                    labelWidth: 60,
                                    name: 'name'
                                }
                            ],
                            listeners: {
                                afterrender: {
                                    fn: me.onFormAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-search',
                            text: '查询',
                            listeners: {
                                click: {
                                    fn: me.onButtonSoClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonSoAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-add',
                            text: '新增',
                            listeners: {
                                click: {
                                    fn: me.onButtonNewClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonNewAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-edit',
                            text: '修改',
                            listeners: {
                                click: {
                                    fn: me.onButtonEditClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonEditAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-del',
                            text: '删除',
                            listeners: {
                                click: {
                                    fn: me.onButtonDeleteClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonDeleteAfterRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    afterPageText: '页，共 {0} 页',
                    beforePageText: '第',
                    displayInfo: true,
                    displayMsg: '第 {0} - {1} 行，共 {2} 行',
                    items: [
                        {
                            xtype: 'combobox',
                            width: 120,
                            fieldLabel: '每页行数',
                            labelAlign: 'right',
                            labelWidth: 60,
                            name: 'pageSize',
                            listeners: {
                                afterrender: {
                                    fn: me.onPageSizeAfterRender,
                                    scope: me
                                },
                                change: {
                                    fn: me.onPageSizeChange,
                                    scope: me
                                }
                            }
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onPagingtoolbarAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        this.btnEdit.setDisabled(selected.length !== 1);
        this.btnDel.setDisabled(selected.length === 0);
    },

    onGridpanelAfterRender: function(component, eOpts) {
        this.loadGrid();
    },

    onFormAfterRender: function(component, eOpts) {
        this.form = component;
    },

    onButtonSoClick: function(button, e, eOpts) {
        this.loadGrid();
    },

    onButtonSoAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/system/role/list'},component:component});
    },

    onButtonNewClick: function(button, e, eOpts) {
        this.showForm('');
    },

    onButtonNewAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/system/role/save'},component:component});
    },

    onButtonEditClick: function(button, e, eOpts) {
        var selected = this.getSelectionModel().selected;
        if(selected.items.length >1)
        {
            Ext.Msg.alert('操作提示','修改只允许选择一行!');
            return;
        }
        else
        {
            var record = selected.items[0];
            if(!Ext.isEmpty(record))
            {
                this.showForm(record.data.id);
            }
            else
            {
                Ext.Msg.alert('操作提示','请选择要修改的列!');
            }
        }
    },

    onButtonEditAfterRender: function(component, eOpts) {
        this.btnEdit = component;
        Common.hidden({params : {url:'/system/role/save'},component:component});
    },

    onButtonDeleteClick: function(button, e, eOpts) {
        Common.deleteSelectionIds(this,ctxp+'/system/role/remove');
    },

    onButtonDeleteAfterRender: function(component, eOpts) {
        this.btnDel = component;
        Common.hidden({params : {url:'/system/role/remove'},component:component});
    },

    onPageSizeAfterRender: function(component, eOpts) {
        this.pageSize = component;
        Common.bindPageSize(component);
    },

    onPageSizeChange: function(field, newValue, oldValue, eOpts) {
        try{
            if(!Ext.isEmpty(this.pagingToolbar))
            {
                this.loadGrid();
            }
        }
        catch(error)
        {
        }
    },

    onPagingtoolbarAfterRender: function(component, eOpts) {
        this.pagingToolbar = component;
    },

    loadGrid: function() {
        var params = {
            name:this.form.getForm().findField('name').getValue()
        };
        Common.loadStore({
            component:this,
            url:ctxp + '/system/role/list',
            pageSize:this.pageSize.getValue(),
            fields: ['id', 'name', 'subFlag','sort','createTime', 'createTimeStr','updateTime','updateTimeStr'],
            params:params
        });
    },

    showForm: function(id) {
        try
        {
            var me = this;
            var formwin = Ext.create('platform.system.view.RoleWindow');
            formwin.addListener('close', function(panel,opts)
                                {
                                    me.getStore().reload();
                                });
            formwin.show();
            formwin.loadForm(id);
        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    }

});