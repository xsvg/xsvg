/*
 * File: app/view/OrgCfgPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.OrgCfgPanel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.OrgCfgPanel',

    requires: [
        'Ext.button.Button',
        'Ext.grid.RowNumberer',
        'Ext.grid.View',
        'Ext.toolbar.Paging',
        'Ext.form.field.ComboBox'
    ],

    border: false,
    title: '系统配置列表',
    forceFit: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'icon-refresh',
                            text: '刷新',
                            listeners: {
                                click: {
                                    fn: me.onRefreshClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-add',
                            text: '新增',
                            listeners: {
                                click: {
                                    fn: me.onAddClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-edit',
                            text: '编辑',
                            listeners: {
                                click: {
                                    fn: me.onEditClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-del',
                            text: '删除',
                            listeners: {
                                click: {
                                    fn: me.onDelClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonDeleteAfterRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    afterPageText: '页，共 {0} 页',
                    beforePageText: '第',
                    displayInfo: true,
                    displayMsg: '第 {0} - {1} 行，共 {2} 行',
                    listeners: {
                        afterrender: {
                            fn: me.onPagingtoolbarAfterRender,
                            single: true,
                            scope: me
                        }
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            width: 120,
                            fieldLabel: '每页行数',
                            labelAlign: 'right',
                            labelWidth: 60,
                            name: 'pageSize',
                            listeners: {
                                afterrender: {
                                    fn: me.onPageSizeAfterRender,
                                    single: true,
                                    scope: me
                                },
                                change: {
                                    fn: me.onPageSizeChange,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'rownumberer',
                    width: 50,
                    text: '序号'
                },
                {
                    xtype: 'gridcolumn',
                    width: 213,
                    dataIndex: 'name',
                    text: '配置项名称'
                },
                {
                    xtype: 'gridcolumn',
                    width: 280,
                    dataIndex: 'value',
                    text: '配置项取值'
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'memo',
                    text: '备注',
                    editor: {
                        xtype: 'textfield'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    width: 250,
                    dataIndex: 'orgName',
                    text: '组织'
                },
                {
                    xtype: 'gridcolumn',
                    width: 120,
                    dataIndex: 'sort',
                    text: '排列顺序'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(value){
                            return "是";
                        }else{
                            return "否";
                        }
                    },
                    hidden: true,
                    width: 100,
                    dataIndex: 'userConf',
                    text: '下级是否修改'
                }
            ],
            listeners: {
                afterrender: {
                    fn: me.onGridPanelAfterRender,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onRefreshClick: function(button, e, eOpts) {
        this.loadGrid();
    },

    onAddClick: function(button, e, eOpts) {
        this.showForm('');
    },

    onEditClick: function(button, e, eOpts) {
        var  me =  this.grid;
        var selected = me.getSelectionModel().selected;

        if(selected.items.length <1){
            Ext.Msg.alert('操作提示','请选择一行!');
            return;
        }

        var record = selected.items[0];
        this.showForm(record.data.id);
    },

    onDelClick: function(button, e, eOpts) {

        Common.deleteSelectionIds(this,ctxp+'/system/OrgCfgController/remove');
    },

    onButtonDeleteAfterRender: function(component, eOpts) {
        this.btnDel = component;
        Common.hidden({params : {url:'/system/OrgCfgController/remove'},component:component});
    },

    onGridPanelAfterRender: function(component, eOpts) {
        this.grid = component;
        this.loadGrid();
    },

    onPagingtoolbarAfterRender: function(component, eOpts) {
        this.pagingToolbar = component;
    },

    onPageSizeAfterRender: function(component, eOpts) {
                this.pageSize = component;
                Common.bindPageSize(component);
    },

    onPageSizeChange: function(field, newValue, oldValue, eOpts) {
               try{
                    if(!Ext.isEmpty(this.pagingToolbar))
                    {
                        this.loadGrid();
                    }
                }
                catch(error)
                {
                }
    },

    loadGrid: function() {

        try{
            Common.loadStore({
                component:this,
                url:ctxp + '/system/OrgCfgController/list',
                pageSize:this.pageSize.getValue(),
                fields: ['id', 'name', 'value','memo','sort','orgName'],
                params:''
            });
        }catch(error){
            alert(error.toString());
        }
    },

    showForm: function(id) {
        try
        {
            var me = this;
            var formwin = Ext.create('platform.system.view.OrgCfgWin');
            formwin.addListener('close', function(panel,opts)
                                {
                                    try{
                                        me.getStore().reload();
                                    }catch(ee){}
                                });
            formwin.show();
            formwin.loadForm(id);
        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    }

});