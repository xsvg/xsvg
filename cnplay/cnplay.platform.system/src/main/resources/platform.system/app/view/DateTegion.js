/*
 * File: app/view/DateTegion.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.DateTegion', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.DateTegion',

    requires: [
        'Ext.form.field.Date'
    ],

    label: '时间间隔',
    startDateName: 'startDate',
    endDateName: 'endDate',
    border: false,
    width: 320,
    layout: 'column',
    header: false,
    title: '时间段',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'datefield',
                    width: 173,
                    fieldLabel: '时间间隔',
                    labelAlign: 'right',
                    labelWidth: 80,
                    name: 'startDateStr',
                    vtype: 'startDate',
                    format: 'Y-m-d',
                    listeners: {
                        beforerender: {
                            fn: me.onDatefieldBeforeRender,
                            single: true,
                            scope: me
                        },
                        change: {
                            fn: me.onStartDatefieldChange,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'datefield',
                    width: 110,
                    fieldLabel: '-',
                    labelAlign: 'right',
                    labelSeparator: ' ',
                    labelWidth: 10,
                    name: 'endDateStr',
                    vtype: 'endDate',
                    format: 'Y-m-d',
                    listeners: {
                        beforerender: {
                            fn: me.onDatefieldBeforeRenderB,
                            single: true,
                            scope: me
                        },
                        change: {
                            fn: me.onEndDatefieldChange,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onDatefieldBeforeRender: function(component, eOpts) {
        component.setFieldLabel(this.label);
        component.name = this.startDateName;
        this.compStart = component;
        this.compStart.setValue(Ext.util.Format.date(Ext.Date.add(new Date(),Ext.Date.MONTH,-1),"Y-m-d"));
    },

    onStartDatefieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        Ext.apply(Ext.form.VTypes, {
            startDate : function(val, field) {
                try{
                    if(newValue.getTime() > me.compEnd.getValue().getTime())
                    {
                        Common.setLoading({comp:me,msg:'开始时间不能晚于结束时间!'});
                        return false;
                    }
                }catch(ex){}
                try{
                    var nowDate = new Date();
                    if(newValue.getTime() > nowDate.getTime())
                    {
                        Common.setLoading({comp:me,msg:'开始时间不能晚于当前时间!'});
                        return false;
                    }
                }catch(ex){}
                return true;
            },
            startDateText : '开始时间不能晚于结束时间!'
        });
    },

    onDatefieldBeforeRenderB: function(component, eOpts) {
        component.name = this.endDateName;
        this.compEnd = component;
        this.compEnd.setValue(new Date());
    },

    onEndDatefieldChange: function(field, newValue, oldValue, eOpts) {
        var me = this;
        Ext.apply(Ext.form.VTypes, {
            endDate : function(val, field) {
                try{
                    if(me.compStart.getValue().getTime() > newValue.getTime())
                    {
                        Common.setLoading({comp:me,msg:'结束时间不能早于开始时间!'});
                        return false;
                    }
                }catch(ex){}
                try{
                    var nowDate = new Date();
                    if(newValue.getTime() > nowDate.getTime())
                    {
                        Common.setLoading({comp:me,msg:'结束时间不能晚于当前时间!'});
                        return false;
                    }
                }catch(ex){}
                return true;
            },
            endDateText : '结束时间不能早于开始时间!'
        });
    },

    validate: function() {
        var me = this;
        try{
            if(me.compStart.getValue().getTime() > me.compEnd.getValue().getTime())
            {
                Common.setLoading({comp:me,msg:'结束时间不能早于开始时间'});
                return false;
            }
        }catch(ex){}
        return true;
    }

});