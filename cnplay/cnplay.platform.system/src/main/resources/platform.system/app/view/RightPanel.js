/*
 * File: app/view/RightPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.RightPanel', {
    extend: 'Ext.tree.Panel',
    alias: 'widget.RightPanel',

    requires: [
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.tree.Column',
        'Ext.grid.column.Boolean',
        'Ext.tree.View'
    ],

    autoRender: true,
    autoScroll: true,
    forceFit: false,
    rootVisible: false,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'icon-edit',
                            text: '修改',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-edit',
                            text: '功能互斥',
                            listeners: {
                                click: {
                                    fn: me.onButtonRejClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onRejButtonAfterRender,
                                    single: true,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'treecolumn',
                    width: 150,
                    dataIndex: 'text',
                    text: '菜单名称',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    width: 200,
                    dataIndex: 'url',
                    text: '访问地址'
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'component',
                    text: '控件名称'
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    dataIndex: 'resource',
                    text: '权限资源'
                },
                {
                    xtype: 'booleancolumn',
                    align: 'center',
                    dataIndex: 'needCheck',
                    text: '是否需复核',
                    falseText: '否',
                    trueText: '是'
                },
                {
                    xtype: 'gridcolumn',
                    hidden: true,
                    align: 'center',
                    dataIndex: 'status',
                    text: '功能状态'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'sort',
                    text: '排列顺序'
                },
                {
                    xtype: 'gridcolumn',
                    width: 295,
                    dataIndex: 'displayName',
                    text: '互斥功能'
                },
                {
                    xtype: 'gridcolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'createTimeStr',
                    text: '创建时间'
                },
                {
                    xtype: 'gridcolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'updateTimeStr',
                    text: '最后更新'
                }
            ],
            viewConfig: {

            },
            listeners: {
                afterrender: {
                    fn: me.onTreepanelAfterRender,
                    single: true,
                    scope: me
                },
                itemclick: {
                    fn: me.onTreepanelItemClick,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onButtonClick: function(button, e, eOpts) {

        try
        {
            var selected  = this.getSelectionModel().selected.items;
            if(selected.length!=1){
                Ext.Msg.alert('提示','请选择一行!');
                return;
            }
            var me = this;
            var formwin = Ext.create('platform.system.view.RightWindow');
            formwin.addListener('close', function(panel,opts)
                                {
                                    me.loadGrid();
                                });
            formwin.show();
            formwin.loadFormData(selected[0].data.id);
        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    onButtonAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/system/right/save'},component:component});
    },

    onButtonRejClick: function(button, e, eOpts) {

        try
        {
            var me = this;
            var selected  = this.getSelectionModel().selected.items;
            if(selected.length!=1){
                Ext.Msg.alert('提示','请选择一行!');
                return;
            }
            var formwin = Ext.create('platform.system.view.RightRejectWindow');
            formwin.addListener('close', function(panel,opts)
                                {
                                    me.loadGrid();
                                });
            formwin.show();
            formwin.loadForm(selected[0].data.id);
        }
        catch(error)
        {

        }
    },

    onRejButtonAfterRender: function(component, eOpts) {
        this.btnReject = component;
        Common.hidden({params : {url:'/system/right/reject/save'},component:component});
    },

    onTreepanelAfterRender: function(component, eOpts) {
        this.loadGrid();
    },

    onTreepanelItemClick: function(dataview, record, item, index, e, eOpts) {
        Common.onTreeChildNodesChecked(dataview.node,false);
        record.set('checked', true);
        this.btnReject.setDisabled(false);
    },

    loadGrid: function() {
        try{
            var me = this;
            var fields = [ {
                name : 'id'
            }, {
                name : 'sort',
                type : 'int'
            }, {
                name : 'leaf',
                type : 'boolean'
            }, 'text','id','parentId','url','needCheck','status','createTimeStr','updateTimeStr','component','resource','iconCls','icon','displayName' ];
            Common.ajax({
                component : me,
                message : '正在加载......',
                url : ctxp+'/system/right/list',
                callback : function(result){
                    var myStore = Ext.create("Ext.data.TreeStore",{
                        defaultRootId : '',
                        clearOnLoad : true,
                        nodeParam : 'id',
                        fields: fields,
                        proxy:
                        {
                            type: 'memory',
                            data: result.rows,
                            reader:{
                                type: 'json'
                            }
                        },
                        listeners : {
                            load : {
                                fn : function(treestore, node, records, successful, eOpts)
                                {
                                    me.expandAll();
                                }
                            }
                        }
                    });
                    me.bindStore(myStore);
                    myStore.reload();
                }
            });
        }catch(ex){
            alert(ex);
        }
    }

});