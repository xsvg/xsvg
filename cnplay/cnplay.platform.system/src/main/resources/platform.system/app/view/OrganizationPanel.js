/*
 * File: app/view/OrganizationPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.OrganizationPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.OrganizationPanel',

    requires: [
        'Ext.toolbar.Toolbar',
        'Ext.form.field.Text',
        'Ext.button.Button',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.tree.Column'
    ],

    layout: 'border',
    title: '组织机构',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'textfield',
                            hidden: true,
                            width: 186,
                            fieldLabel: '层次编码',
                            labelAlign: 'right',
                            labelWidth: 60,
                            name: 'query',
                            listeners: {
                                beforerender: {
                                    fn: me.onTextfieldBeforeRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            hidden: true,
                            iconCls: 'icon-search',
                            text: '查询',
                            listeners: {
                                click: {
                                    fn: me.onSearchClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-refresh',
                            text: '刷新',
                            listeners: {
                                click: {
                                    fn: me.onRefreshClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-add',
                            text: '新增',
                            listeners: {
                                click: {
                                    fn: me.onAddClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onAddAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-edit',
                            text: '修改',
                            listeners: {
                                click: {
                                    fn: me.onEditClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onEditAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-del',
                            text: '删除',
                            listeners: {
                                click: {
                                    fn: me.onDelClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onDelAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-excel',
                            text: '导入',
                            listeners: {
                                click: {
                                    fn: me.onImportClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onImportAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-file',
                            text: '导出',
                            listeners: {
                                click: {
                                    fn: me.onExportClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onExportAfterRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'treepanel',
                    loadQueryData: function(queryParam) {
                        var me = this;
                        Common.ajax({
                            component : me,
                            params:{'query':queryParam},
                            message : '正在加载......',
                            url : ctxp+'/system/organization/listParam',
                            callback : function(result)
                            {
                                Common.bindTree({pid:result.rows,fields: [{name:'id'}, {name:'name'}, {name:'code'},{name:'levelCode'},{name:'parentId'}],url:ctxp+'/system/organization/list',treePanel:me});
                            }
                        });
                    },
                    region: 'center',
                    border: false,
                    title: '机构树',
                    forceFit: true,
                    rootVisible: false,
                    viewConfig: {

                    },
                    columns: [
                        {
                            xtype: 'treecolumn',
                            dataIndex: 'name',
                            text: '机构名称'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'code',
                            text: '机构编码'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'managerName',
                            text: '管理机构'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'leader',
                            text: '负责人'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'address',
                            text: '机构地址'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'memo',
                            text: '备注'
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onTreePanelAfterRender,
                            single: true,
                            scope: me
                        },
                        itemclick: {
                            fn: me.onTreepanelItemClick,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onTextfieldBeforeRender: function(component, eOpts) {
        this.query = component;
    },

    onSearchClick: function(button, e, eOpts) {
        var me = this;
        me.treeGrid.loadQueryData(me.query.getValue());
    },

    onRefreshClick: function(button, e, eOpts) {
        this.loadTreeGrid();
    },

    onAddClick: function(button, e, eOpts) {
        this.showForm('');
    },

    onAddAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/system/organization/save'},component:component});
    },

    onEditClick: function(button, e, eOpts) {
          var  me =  this.treeGrid;
          var selected = me.getSelectionModel().selected;
        if(selected.items.length >1)
        {
            Common.setLoading({comp:me,msg:'只允许选择一个机构进行修改！'});
            return;
        }
        else
        {
            var record = selected.items[0];
            if(!Ext.isEmpty(record))
            {
                this.showForm(record.data.id);
            }
            else
            {
                Common.setLoading({comp:me,msg:'请选择要修改的机构！'});
            }

        }
    },

    onEditAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/system/organization/save'},component:component});
    },

    onDelClick: function(button, e, eOpts) {
        //Common.deleteSelectionIds(this.treeGrid,ctxp+'/system/organization/remove');

        try{
                var me = this;
                var selected = me.treeGrid.getSelectionModel().selected;
                var selecteditems = selected.items;
                if (selecteditems.length === 0)
                {
                    Ext.Msg.show(
                    {
                        title : "操作提示",
                        msg : "请选择要删除的机构!",
                        buttons : Ext.Msg.OK,
                        icon : Ext.Msg.WARNING
                    });
                    return;
                }
                var ids = [];
                Ext.each(selecteditems, function()
                {
                    var nd = this;
                    ids.push(nd.data.id);
                });
                Ext.Msg.confirm("确认提示", "确定要删除选中的机构吗？", function(button)
                {
                    if (button == "yes")
        				{
        					try
        					{
        						Common.ajax({
        							component : me.treeGrid,
        							params : {
        								'id' : ids.join(",")
        							},
        							message : '正在删除选中的机构...',
        							url : ctxp+'/system/organization/remove',
        							callback : function(result)
        							{
                                        me.loadTreeGrid();
                                        //me.expandSelected();
                                        Common.setLoading({comp:me,msg:'机构删除成功！'});
        							}
        						});
        					}
        					catch (error)
        					{
        						Common.show({title:'操作提示',html:error.toString()});
        					}
        				}
        		});
                 }
        		catch (error)
        		{
        			Common.show({title:'操作提示',html:error.toString()});
        		}

    },

    onDelAfterRender: function(component, eOpts) {
         Common.hidden({params : {url:'/system/organization/remove'},component:component});
    },

    onImportClick: function(button, e, eOpts) {
        //Common.deleteSelectionIds(this.treeGrid,ctxp+'/system/organization/remove');

        try{

            var me = this;

            Common.ajax({
                component:me,
                url:ctxp+'/system/organization/loadImportOrg',
                callback:function(result)
                {
                    if(result.rows){
                        Common.upload({
                            url:ctxp+'/system/organization/loadImportOrgCheck',
                            suffix:'xls,xlsx',
                            callback : function(result)
                            {
                                try{
                                    if(result.rows.length>0){
                                        var formwin = Ext.create('platform.system.view.OrgImportWin');
                                        formwin.addListener('close', function(panel,opts)
                                                            {
                                                                try{
                                                                    me.loadTreeGrid();
                                                                }catch(ee){}
                                                            });
                                        formwin.show();
                                        formwin.loadForm(result.rows);
                                        if (result.success)
                                        {
                                            if(Ext.isEmpty(result.msg)){
                                                Common.alert({title : '操作提示', msg : "部分机构信息导入失败，请查看详细错误信息！",icon : Ext.Msg.WARNING});

                                            }else{
                                                Common.alert({title : '操作提示', msg : result.msg,icon : Ext.Msg.WARNING});
                                            }
                                        }
                                        else
                                        {
                                            if(Ext.isEmpty(result.msg)){
                                                Common.alert({title : '操作提示', msg : "机构信息导入成功！",icon : Ext.Msg.WARNING});
                                            }else{
                                                Common.alert({title : '操作提示', msg : result.msg,icon : Ext.Msg.WARNING});
                                            }
                                        }

                                    }else{
                                        if(Ext.isEmpty(result.msg)){
                                            Common.alert({title : '操作提示', msg : "机构信息导入失败，请确认！",icon : Ext.Msg.WARNING});

                                        }else{
                                            Common.alert({title : '操作提示', msg : result.msg,icon : Ext.Msg.WARNING});
                                        }



                                        try{
                                            me.loadTreeGrid();
                                        }catch(ee){}
                                    }

                                }
                                catch(error)
                                {
                                    Common.show({title:'信息提示',html:error.toString()});
                                }
                            }
                        });
                    }
                }
            });





        }
        catch (error)
        {
            Common.show({title:'操作提示',html:error.toString()});
        }

    },

    onImportAfterRender: function(component, eOpts) {
         Common.hidden({params : {url:'/system/organization/loadImportOrg'},component:component});
    },

    onExportClick: function(button, e, eOpts) {
        //Common.deleteSelectionIds(this.treeGrid,ctxp+'/system/organization/remove');
        try
        {
            window.open(ctxp+'/system/organization/exportOrg?');
            //location.href = ctxp+'/system/organization/exportOrg';
        }
        catch (error)
        {
            Common.show({title:'操作提示',html:error.toString()});
        }
    },

    onExportAfterRender: function(component, eOpts) {
         //Common.hidden({params : {url:'/system/organization/exportOrg'},component:component});
    },

    onTreePanelAfterRender: function(component, eOpts) {
        this.treeGrid = component;
        try{

            this.loadTreeGrid();}
        catch(e){

            alert(e.toString());
        }

    },

    onTreepanelItemClick: function(dataview, record, item, index, e, eOpts) {
        Common.onTreeChildNodesChecked(dataview.node,false);
        record.set('checked', true);

        var items = this.treeGrid.getSelectionModel().selected.items;
        if(items.length > 0) {
            this.selectedParentNode = items[0].parentNode;
        }else{
            this.selectedParentNode = me.treeGrid.getRootNode();
        }
    },

    loadTreeGrid: function() {
        var me = this;
        me.expandNode = true;
        Common.bindTree({
            treePanel:me.treeGrid,
            url:ctxp + '/system/organization/list',
            pid:'',
            fields:['id','sort','code','name','leader','levelCode','status','orgType','address','managerName','memo'],
            onload:function onload(treestore, node, records, successful, eOpts){
                if(records.length>0 && me.expandNode){
                    Ext.defer(function(){me.treeGrid.expandNode(records[0]);},100);
                    me.expandNode = false;
                }
            }
        });
    },

    showForm: function(id) {
        try
        {
            var me = this;
            var formwin = Ext.create('platform.system.view.OrganizationWindow');
            formwin.addListener('close', function(panel,opts)
                                {
                                    me.loadTreeGrid();
                                    //me.expandSelected();
                                });
            formwin.show();
            formwin.loadForm(id);
        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    check: function() {

        //用于防止重复提交
        excel_flag ++;
        if(excel_flag > 30)
        {
            //清空定时器
            window.clearInterval(win_check);
            //启用按钮
            exportExcelBtn.enable();
        }
        Ext.Ajax.request(
            {
                url : 'check',
                success : function (response, result)
                {
                    if(response.responseText=="true")
                    {
                        //清空定时器
                        window.clearInterval(win_check);
                        //启用按钮
                        exportExcelBtn.enable();
                    }
                }
            });

    },

    expandSelected: function() {
        try{
            var me = this;
            me.treeGrid.getStore().load({
                node: me.selectedParentNode,
                callback: function ()
                {
                    try{
                    me.treeGrid.expandNode(me.selectedParentNode);
                    }catch(Ex){}
                }
            });
        }catch(ee){}
    }

});