/*
 * File: app/view/SystemLog.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.SystemLog', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.SystemLog',

    requires: [
        'platform.system.view.DateTegion',
        'Ext.form.Panel',
        'Ext.button.Button',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.selection.CheckboxModel',
        'Ext.toolbar.Paging',
        'Ext.form.field.ComboBox'
    ],

    title: '系统日志',
    forceFit: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'form',
                    dock: 'top',
                    border: false,
                    layout: 'column',
                    bodyBorder: false,
                    header: false,
                    title: '查询表单',
                    items: [
                        {
                            xtype: 'textfield',
                            margin: 5,
                            width: 270,
                            fieldLabel: '功能名称',
                            labelAlign: 'right',
                            labelWidth: 60,
                            name: 'name'
                        },
                        {
                            xtype: 'DateTegion',
                            margin: 5
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFormAfterRender,
                            scope: me
                        }
                    },
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            dock: 'top',
                            height: '',
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-search',
                                    text: '查询',
                                    listeners: {
                                        afterrender: {
                                            fn: me.onBtnSearchAfterRender,
                                            scope: me
                                        },
                                        click: {
                                            fn: me.onBtnSearchClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    disabled: true,
                                    hidden: true,
                                    iconCls: 'icon-del',
                                    text: '删除',
                                    listeners: {
                                        afterrender: {
                                            fn: me.onBtnDelAfterRender,
                                            scope: me
                                        },
                                        click: {
                                            fn: me.onBtnDelClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'icon-file',
                                    text: '导出',
                                    listeners: {
                                        click: {
                                            fn: me.onExportClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    afterPageText: '页，共 {0} 页',
                    beforePageText: '第',
                    displayInfo: true,
                    displayMsg: '第 {0} - {1} 行，共 {2} 行',
                    listeners: {
                        beforerender: {
                            fn: me.onPagingtoolbarBeforeRender,
                            single: true,
                            scope: me
                        }
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            width: 120,
                            fieldLabel: '每页行数',
                            labelAlign: 'right',
                            labelWidth: 60,
                            name: 'pageSize',
                            listeners: {
                                beforerender: {
                                    fn: me.onpageSizeAfterRender,
                                    single: true,
                                    scope: me
                                },
                                change: {
                                    fn: me.onComboboxChange,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'name',
                    text: '功能名称'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'username',
                    text: '操作人'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'orgName',
                    text: '机构名称'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'memo',
                    text: '备注'
                },
                {
                    xtype: 'gridcolumn',
                    width: 150,
                    dataIndex: 'createTimeStr',
                    text: '日志时间'
                },
                {
                    xtype: 'gridcolumn',
                    width: 300,
                    dataIndex: 'proceed',
                    text: '操作状态'
                }
            ],
            selModel: Ext.create('Ext.selection.CheckboxModel', {

            }),
            listeners: {
                afterrender: {
                    fn: me.onGridpanelAfterRender,
                    scope: me
                },
                selectionchange: {
                    fn: me.onGridpanelSelectionChange,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onFormAfterRender: function(component, eOpts) {
        this.form = component;
    },

    onBtnSearchAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/system/log/list'},component:component});
    },

    onBtnSearchClick: function(button, e, eOpts) {

        this.loadGrid();
    },

    onBtnDelAfterRender: function(component, eOpts) {
        this.btnDel = component;
        Common.hidden({params : {url:'/system/log/remove'},component:component});
    },

    onBtnDelClick: function(button, e, eOpts) {
        Common.deleteSelectionIds(this,ctxp+'/system/log/remove');
    },

    onExportClick: function(button, e, eOpts) {
        try
        {
            var me = this;
            var strParam=Common.paramStr(me.form.getForm().getValues());
            window.open(ctxp+'/system/log/exportSysLog?'+encodeURI(encodeURI(strParam)));
            //location.href = ctxp+'/system/log/exportSysLog?name='+encodeURI(encodeURI(strParam));

        }
        catch (error)
        {
            Common.show({title:'操作提示',html:error.toString()});
        }
    },

    onGridpanelAfterRender: function(component, eOpts) {

        this.loadGrid();
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {

        this.btnDel.setDisabled(selected.length === 0);
    },

    onPagingtoolbarBeforeRender: function(component, eOpts) {
        this.pagingToolbar = component;
    },

    onpageSizeAfterRender: function(component, eOpts) {
        this.pageSize = component;
        Common.bindPageSize(component);
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        this.loadGrid();
    },

    loadGrid: function() {
        try{
            var me=this;
            var params = me.form.getForm().getValues();
            Common.loadStore({
                component:this,
                url:ctxp + '/system/log/list',
                pageSize:this.pageSize.getValue(),
                fields: ['id', 'name', 'username','memo', 'createTime','createTimeStr','url','argsJson','proceed','orgName'],
                params:params
            });
        }catch(ex){}
    }

});