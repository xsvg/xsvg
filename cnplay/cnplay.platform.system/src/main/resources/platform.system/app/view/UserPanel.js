/*
 * File: app/view/UserPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.UserPanel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.UserPanel',

    requires: [
        'Ext.button.Button',
        'Ext.form.Panel',
        'Ext.form.field.Hidden',
        'Ext.toolbar.Paging',
        'Ext.form.field.ComboBox',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.selection.CheckboxModel'
    ],

    bodyBorder: false,
    header: false,
    title: '用户数据',
    columnLines: true,
    forceFit: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    border: false,
                    items: [
                        {
                            xtype: 'button',
                            hidden: true,
                            iconCls: '',
                            text: '清空',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-search',
                            text: '查询',
                            listeners: {
                                click: {
                                    fn: me.onBtnSoClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-refresh',
                            text: '刷新',
                            listeners: {
                                click: {
                                    fn: me.onBtnRefClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-add',
                            text: '新增',
                            listeners: {
                                click: {
                                    fn: me.onBtnNewClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onNewAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-edit',
                            text: '修改',
                            listeners: {
                                click: {
                                    fn: me.onBtnEditClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onEditAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'settings',
                            text: '重置密码',
                            tooltip: '设置为初始密码',
                            listeners: {
                                click: {
                                    fn: me.onResetPassClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onSetPwdAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-status-online',
                            text: '解锁',
                            listeners: {
                                click: {
                                    fn: me.onBtnNormalClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onRestoreAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-status-offline',
                            text: '锁定',
                            listeners: {
                                click: {
                                    fn: me.onBtnBannedClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onBannedAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-del',
                            text: '删除',
                            listeners: {
                                click: {
                                    fn: me.onBtnDelClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onDeleteAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-save',
                            text: '配置角色',
                            listeners: {
                                click: {
                                    fn: me.onSetRoleClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onRoleAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-save',
                            text: '指纹管理',
                            listeners: {
                                click: {
                                    fn: me.onFingerClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onFingerAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-excel',
                            text: '导入',
                            listeners: {
                                click: {
                                    fn: me.onImportClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onImportAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-file',
                            text: '导出',
                            listeners: {
                                click: {
                                    fn: me.onExportClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onExportAfterRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'form',
                    dock: 'top',
                    width: 100,
                    layout: 'column',
                    bodyPadding: 10,
                    header: false,
                    title: '查询条件',
                    items: [
                        {
                            xtype: 'textfield',
                            fieldLabel: '用户姓名',
                            labelAlign: 'right',
                            labelWidth: 60,
                            name: 'query'
                        },
                        {
                            xtype: 'textfield',
                            fieldLabel: '组织机构',
                            labelAlign: 'right',
                            labelWidth: 60,
                            readOnly: true,
                            listeners: {
                                focus: {
                                    fn: me.onOrgFocus,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'hiddenfield',
                            fieldLabel: '组织机构',
                            labelAlign: 'right',
                            labelWidth: 60,
                            name: 'orgId'
                        }
                    ],
                    listeners: {
                        beforerender: {
                            fn: me.onFormBeforeRender,
                            single: true,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    afterPageText: '页，共 {0} 页',
                    beforePageText: '第',
                    displayInfo: true,
                    displayMsg: '第 {0} - {1} 行，共 {2} 行',
                    items: [
                        {
                            xtype: 'combobox',
                            width: 120,
                            fieldLabel: '每页行数',
                            labelAlign: 'right',
                            labelWidth: 60,
                            name: 'pageSize',
                            listeners: {
                                afterrender: {
                                    fn: me.onPageSizeAfterRender,
                                    scope: me
                                },
                                change: {
                                    fn: me.onPageSizeChange,
                                    scope: me
                                }
                            }
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onPagingtoolbarAfterRender,
                            scope: me
                        }
                    }
                }
            ],
            columns: [
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    dataIndex: 'username',
                    text: '登录帐号'
                },
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    dataIndex: 'name',
                    text: '用户姓名'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'orgName',
                    text: '所属机构'
                },
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    dataIndex: 'mobile',
                    text: '手机号码'
                },
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    dataIndex: 'idCard',
                    text: '身份证号码'
                },
                {
                    xtype: 'gridcolumn',
                    sortable: false,
                    dataIndex: 'jobName',
                    text: '岗位名称'
                },
                {
                    xtype: 'gridcolumn',
                    defaultWidth: 40,
                    dataIndex: 'displayName',
                    text: '角色'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(value===true){
                            return "已采集";
                        }else if(value===false){
                            return "未采集";
                        }else{
                            return value;
                        }
                    },
                    sortable: false,
                    dataIndex: 'isCollectFinger',
                    text: '指纹采集'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(value=="0"){
                            return "男";
                        }else if(value=="1"){
                            return "女";
                        }else{
                            return value;
                        }
                    },
                    sortable: false,
                    dataIndex: 'sex',
                    text: '性别'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(value=='Normal'){
                            return "正常";
                        }else if(value=="Banned"){
                            return "锁定";
                        }else if(value=="Delete"){
                            return "删除";
                        }else{
                            return value;
                        }
                    },
                    defaultWidth: 40,
                    dataIndex: 'status',
                    text: '状态'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(value===0){
                            return "系统配置";
                        }else {
                            return "用户密码";
                        }
                    },
                    defaultWidth: 40,
                    dataIndex: 'authType',
                    text: '验证方式'
                },
                {
                    xtype: 'gridcolumn',
                    defaultWidth: 40,
                    dataIndex: 'memo',
                    text: '备注'
                }
            ],
            selModel: Ext.create('Ext.selection.CheckboxModel', {

            }),
            listeners: {
                selectionchange: {
                    fn: me.onGridpanelSelectionChange,
                    scope: me
                },
                afterlayout: {
                    fn: me.onPanelAfterLayout,
                    single: true,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onButtonClick: function(button, e, eOpts) {
        var me = this;
        this.orgid = '';
        me.qryOrg.setValue('');
        me.qryOrg.clearVal();

    },

    onBtnSoClick: function(button, e, eOpts) {

        this.loadGrid();
    },

    onBtnRefClick: function(button, e, eOpts) {


        this.loadGrid();

    },

    onBtnNewClick: function(button, e, eOpts) {
        this.showForm('');
    },

    onNewAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/system/user/saveUser'},component:component});
    },

    onBtnEditClick: function(button, e, eOpts) {
        var selected = this.getSelectionModel().selected;
        var record = selected.items[0];
        if(!Ext.isEmpty(record))
        {
            this.showForm(record.data.id);
        }
        else
        {
            Ext.Msg.alert('操作提示','请选择要修改的记录!');
        }
    },

    onEditAfterRender: function(component, eOpts) {

        this.btnEdit = component;
        Common.hidden({params : {url:'/system/user/saveUser'},component:component});
    },

    onResetPassClick: function(button, e, eOpts) {
        var me = this;
        var selected = me.getSelectionModel().selected;
        var selecteditems = selected.items;
        if (selecteditems.length === 0)
        {
            Ext.Msg.show(
                {
                    title : "操作提示",
                    msg : "请选择节点!",
                    icon : Ext.Msg.WARNING
                });
            return;
        }
        var ids = [];
        Ext.each(selecteditems, function()
                 {
                     var nd = this;
                     ids.push(nd.data.id);
                 });
        Ext.Msg.confirm("警告", "确定将选取的用户密码重置为初始密码吗？", function(button)
                        {
                            if (button == "yes")
                            {
                                Common.ajax({
                                    component:me,
                                    url : ctxp+'/system/user/updatePwd',
                                    params :
                                    {
                                        'ids' : ids.join(",")
                                    },
                                    callback : function(result){
                                        Ext.Msg.alert("操作提示", "操作成功");
                                        me.getStore().reload();
                                    }});
                            }
                        });
    },

    onSetPwdAfterRender: function(component, eOpts) {
        this.btnResetPwd = component;
        Common.hidden({params : {url:'/system/user/updatePwd'},component:component});
    },

    onBtnNormalClick: function(button, e, eOpts) {
        this.userStatus('Normal');
    },

    onRestoreAfterRender: function(component, eOpts) {
        this.btnRestor = component;
        Common.hidden({params : {url:'/system/user/updateStatus'},component:component});
    },

    onBtnBannedClick: function(button, e, eOpts) {
        this.userStatus('Banned');
    },

    onBannedAfterRender: function(component, eOpts) {
        this.btnBanned = component;
        Common.hidden({params : {url:'/system/user/updateStatus'},component:component});
    },

    onBtnDelClick: function(button, e, eOpts) {
        this.userStatus('Delete');
        //Common.deleteSelectionIds(this.userGridPanel,ctxp+'/system/user/removeUser');
    },

    onDeleteAfterRender: function(component, eOpts) {
        this.btnDel = component;
        Common.hidden({params : {url:'/system/user/updateStatus'},component:component});
        //Common.hidden({params : {url:'/system/user/removeUser'},component:component});
    },

    onSetRoleClick: function(button, e, eOpts) {
        var selected = this.getSelectionModel().selected;
                var record = selected.items[0];
                if(!Ext.isEmpty(record))
                {
                    this.showRoleForm(record.data.id);
                }
                else
                {
                    Ext.Msg.alert('操作提示','请选择要修改的记录!');
                }

    },

    onRoleAfterRender: function(component, eOpts) {
        this.btnRight = component;
        Common.hidden({params : {url:'/system/user/updateRoleRight'},component:component});
    },

    onFingerClick: function(button, e, eOpts) {
        var selected = this.getSelectionModel().selected;
                var record = selected.items[0];
                if(!Ext.isEmpty(record))
                {
                    this.showFingerForm(record.data.id);
                }
                else
                {
                    Ext.Msg.alert('操作提示','请选择用户!');
                }

    },

    onFingerAfterRender: function(component, eOpts) {
        this.btnFinger = component;
        Common.hidden({params : {url:'/system/user/fingerList'},component:component});
    },

    onImportClick: function(button, e, eOpts) {
        try{

            var me = this;
            var roleConfig="0";
            Common.ajax({
                component:me,
                url:ctxp+'/system/user/loadImportUser',
                callback:function(result)
                {
                    if(result.rows){
                        Ext.Msg.confirm('设置提示', '确定根据导入用户数据配置角色吗？', function(button){
                            if (button == 'yes'){
                                roleConfig="1";
                            }

                            Common.upload({
                                //url:ctxp+'/system/user/loadImportUser?roleConfig='+roleConfig,
                                //url:ctxp+'/system/user/loadImportUser',
                                suffix:'xls,xlsx',
                                callback : function(result)
                                {
                                    try{
                                        Common.ajax({
                                            url:ctxp+'/system/user/loadImportUserCheck?attaId='+result.rows.id+'&roleConfig='+roleConfig,
                                            callback:function(result2){
                                                if(result2.rows.length>0){
                                                    var formwin = Ext.create('platform.system.view.UserImportWin');
                                                    formwin.addListener('close', function(panel,opts)
                                                                        {
                                                                            try{
                                                                                me.getStore().reload();
                                                                            }catch(ee){}
                                                                        });
                                                    formwin.show();
                                                    formwin.loadForm(result2.rows);

                                                    if(Ext.isEmpty(result2.msg)){
                                                        Common.alert({title : '操作提示', msg : "部分用户信息导入失败，请查看详细错误信息！",icon : Ext.Msg.WARNING});

                                                    }else{
                                                        Common.alert({title : '操作提示', msg : result2.msg,icon : Ext.Msg.WARNING});
                                                    }

                                                }else{

                                                    if(Ext.isEmpty(result2.msg)){
                                                        Common.alert({title : '操作提示', msg : "用户信息导入成功！",icon : Ext.Msg.WARNING});
                                                    }else{
                                                        Common.alert({title : '操作提示', msg : result2.msg,icon : Ext.Msg.WARNING});
                                                    }

                                                    try{
                                                        me.loadGrid();
                                                    }catch(ee){}
                                                }
                                            }

                                        });

                                    }
                                    catch(error)
                                    {
                                        Common.show({title:'信息提示',html:error.toString()});
                                    }
                                }
                            });
                        });

                    }
                }
            });

        }
        catch (error)
        {
            Common.show({title:'操作提示',html:error.toString()});
        }

    },

    onImportAfterRender: function(component, eOpts) {
        this.btnImport = component;
        Common.hidden({params : {url:'/system/user/loadImportUser'},component:component});
    },

    onExportClick: function(button, e, eOpts) {
        try
        {
            var me=this;
            var strParam=Common.paramStr(me.form.getForm().getValues());
            window.open(ctxp+'/system/user/exportUser?'+encodeURI(strParam));
            //location.href = ctxp+'/system/user/exportUser?'+encodeURI(encodeURI(strParam));
        }
        catch (error)
        {
            Common.show({title:'操作提示',html:error.toString()});
        }

    },

    onExportAfterRender: function(component, eOpts) {
        this.btnExport = component;
        //Common.hidden({params : {url:'/system/user/exportUser'},component:component});
    },

    onOrgFocus: function(component, e, eOpts) {
        try{
            var me = this;
            var orgId = me.form.getForm().findField('orgId');
            Common.showTreeSelect({
                multiple:false,
                url:ctxp + '/home/loadUserOrgTree',
                params:{orgId: orgId.getValue()},
                callback:function(item)
                {
                    orgId.setValue(item.id);
                    component.setValue(item.text);
                }
            });
        }catch(ex){}
    },

    onFormBeforeRender: function(component, eOpts) {
        this.form = component;
    },

    onPageSizeAfterRender: function(component, eOpts) {
        this.pageSize = component;
        Common.bindPageSize(component);
    },

    onPageSizeChange: function(field, newValue, oldValue, eOpts) {
        try{
            if(!Ext.isEmpty(this.pagingToolbar))
            {
                this.loadGrid();
            }
        }
        catch(error)
        {
        }
    },

    onPagingtoolbarAfterRender: function(component, eOpts) {
        this.pagingToolbar = component;
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        this.btnEdit.setDisabled(selected.length !== 1);
        this.btnRestor.setDisabled(selected.length < 1);
        this.btnResetPwd.setDisabled(selected.length < 1);
        this.btnBanned.setDisabled(selected.length < 1);
        this.btnDel.setDisabled(selected.length < 1);
        this.btnRight.setDisabled(selected.length !== 1);
        this.btnFinger.setDisabled(selected.length !== 1);
    },

    onPanelAfterLayout: function(container, layout, eOpts) {
        this.loadGrid();
    },

    loadGrid: function() {
        try{
            var me = this;
            var orgId = me.form.getForm().findField('orgId').getValue();
            var query = me.form.getForm().findField('query').getValue();
            Common.loadStore({
                component:this,
                url:ctxp + '/system/user/listAll',
                pageSize:this.pageSize.getValue(),
                fields: ['id','name','username','isCollectFinger','orgName','mobile','status','authType','idCard','sex','jobName','memo','displayName'],
                params:{query:query,orgid:orgId}
            });
        }catch(ex){}
    },

    userStatus: function(status) {
        var me = this;
        var selected = me.getSelectionModel().selected;
        var selecteditems = selected.items;
        if (selecteditems.length === 0)
        {
            Ext.Msg.show(
                {
                    title : "操作提示",
                    msg : "请选择节点!",
                    icon : Ext.Msg.WARNING
                });
            return;
        }
        var ids = [];
        Ext.each(selecteditems, function()
                 {
                     var nd = this;
                     ids.push(nd.data.id);
                 });
        Ext.Msg.confirm("警告", "确定要执行吗？", function(button)
                        {
                            if (button == "yes")
                            {
                                Common.ajax({
                                    component:me,
                                    url : ctxp+'/system/user/updateStatus',
                                    params :
                                    {
                                        'ids' : ids.join(","),
                                        'status':status
                                    },
                                    callback : function(result){
                                        Ext.Msg.alert("操作提示", "操作成功");
                                        me.getStore().reload();
                                    }});
                            }
                        });
    },

    onTreeItemClick: function(dataview, record, item, index, e, eOpts) {
        if(record.data.checked)
        {
            record.set('checked', false);
            Common.onTreePanelCheckChange(record,false,eOpts);
        }
        else
        {
            record.set('checked', true);
            Common.onTreePanelCheckChange(record,true,eOpts);
        }
    },

    loadOrg: function() {

        Common.bindTree({
            pid:'',
            fields:['id','name'],
            url : ctxp+'/system/organization/list',
            treePanel:this.treeGrid
        });
    },

    showForm: function(id) {
        try
        {
            var me = this;
            var formwin = Ext.create('platform.system.view.UserDetailWin');

            formwin.addListener('close', function(panel,opts)
                                {
                                    me.getStore().reload();
                                });
            formwin.loadForm(id);
            formwin.show();

        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    showRoleForm: function(userid) {
        try
        {
            var me = this;
            var formwin = Ext.create('platform.system.view.UserRoleWin');
            formwin.addListener('close', function(panel,opts)
                                {
                                    me.getStore().reload();
                                });
            formwin.loadData(userid);
            formwin.show();

        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    showFingerForm: function(userid) {
        try
        {
            var me = this;
            var formwin = Ext.create('platform.system.view.UserFingerWin');
            formwin.addListener('close', function(panel,opts)
                                {
                                    me.getStore().reload();
                                });
            formwin.show();
            formwin.loadData(userid);
        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    paramstr: function(jsonobj) {

        var rst='';
        for(var key in jsonobj){
            var vv=jsonobj[key];
            if("undefined"==typeof(vv)){
                vv='';
            }
            rst=rst+ '&' + key + '=' + vv;
        }
        return rst;
    }

});