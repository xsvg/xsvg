/*
 * File: app/view/RoleWindow.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.RoleWindow', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.form.Panel',
        'Ext.form.Label',
        'Ext.form.field.Checkbox',
        'Ext.form.field.Number',
        'Ext.form.field.Hidden',
        'Ext.tree.Panel',
        'Ext.tree.View',
        'Ext.form.field.Display',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button'
    ],

    height: 432,
    width: 450,
    resizable: false,
    title: '编辑角色',
    modal: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'form',
                    dock: 'top',
                    border: false,
                    height: 374,
                    layout: 'column',
                    bodyPadding: 10,
                    header: false,
                    title: '编辑角色表单',
                    items: [
                        {
                            xtype: 'textfield',
                            padding: 5,
                            width: 373,
                            fieldLabel: '角色名称',
                            labelAlign: 'right',
                            labelSeparator: '：',
                            labelWidth: 60,
                            name: 'name',
                            allowBlank: false,
                            maxLength: 50
                        },
                        {
                            xtype: 'label',
                            html: '<font color=red>*</font>',
                            padding: '10 5 5 5'
                        },
                        {
                            xtype: 'checkboxfield',
                            padding: 5,
                            fieldLabel: '下级可选',
                            labelAlign: 'right',
                            labelSeparator: '：',
                            labelWidth: 60,
                            name: 'subFlag',
                            boxLabel: '下级机构是否可选',
                            checked: true,
                            inputValue: '1',
                            uncheckedValue: '0'
                        },
                        {
                            xtype: 'numberfield',
                            padding: 5,
                            width: 392,
                            fieldLabel: '排列顺序',
                            labelAlign: 'right',
                            labelSeparator: '：',
                            labelWidth: 60,
                            name: 'sort',
                            allowBlank: false,
                            maxLength: 8
                        },
                        {
                            xtype: 'hiddenfield',
                            width: 150,
                            fieldLabel: 'Label',
                            name: 'id'
                        },
                        {
                            xtype: 'hiddenfield',
                            height: 150,
                            fieldLabel: 'Label',
                            name: 'rightIds'
                        },
                        {
                            xtype: 'treepanel',
                            stateful: true,
                            height: 247,
                            width: 378,
                            autoScroll: true,
                            header: false,
                            title: '权限配置',
                            animate: true,
                            rootVisible: false,
                            viewConfig: {

                            },
                            listeners: {
                                afterrender: {
                                    fn: me.onTreepanelAfterRender,
                                    scope: me
                                },
                                itemclick: {
                                    fn: me.onTreePanelItemClick,
                                    scope: me
                                }
                            },
                            dockedItems: [
                                {
                                    xtype: 'displayfield',
                                    dock: 'left',
                                    width: 70,
                                    fieldLabel: '功能权限',
                                    labelAlign: 'right',
                                    labelSeparator: '：',
                                    labelWidth: 65,
                                    value: ''
                                }
                            ]
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFormAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'end'
                    },
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'icon-save',
                            text: '保存',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-cancel',
                            text: '取消',
                            listeners: {
                                click: {
                                    fn: me.onButtonCancelClick,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onFormAfterRender: function(component, eOpts) {
        this.form = component;
    },

    onTreepanelAfterRender: function(component, eOpts) {
        this.treePanel = component;
    },

    onTreePanelItemClick: function(dataview, record, item, index, e, eOpts) {
        if(record.data.checked)
        {
            record.set('checked', false);
            Common.onTreePanelCheckChange(record,false,eOpts);
        }
        else
        {
            record.set('checked', true);
            Common.onTreePanelCheckChange(record,true,eOpts);
        }
    },

    onButtonClick: function(button, e, eOpts) {
        var me = this;
        try{
            var rightIds = [];
            var items = me.treePanel.getChecked();
            Ext.each(items, function()
                     {
                         var nd = this;
                         rightIds.push(nd.data.id);
                     });
            me.form.getForm().findField('rightIds').setValue(rightIds);
            Common.formSubmit({
                url : ctxp+'/system/role/save',
                form:me.form,
                callback : function(result)
                {
                    Ext.Msg.alert('信息提示', '角色保存成功！');
                    me.close();
                }
            });
        }catch(error){
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    onButtonCancelClick: function(button, e, eOpts) {
        var me = this;
        me.close();

    },

    loadForm: function(id) {
        var me = this;
        try{
            Common.ajax({
                component : me.form,
                message : '加载信息...',
                url : ctxp+'/system/role/load?id='+id,
                callback : function(result)
                {
                    me.form.getForm().reset();
                    me.form.getForm().setValues(result.rows);
                    if(!Ext.isEmpty(id)){
                        me.form.getForm().findField('name').setReadOnly(true);
                     }
                }
            });
            me.loadTree(id);
        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    loadTree: function(id) {
        //var me = this;
        //me.expandAll = true;
        //Common.bindTree({
            //treePanel:me.treePanel,
            //url:ctxp + '/system/role/loadRight?roleId='+id,
            //pid:'',
            //fields:['id','text','children']//,
            //onload:function(treestore, node, records, successful, eOpts)
            //{
             //   if(!me.expandAll){
               //     me.treePanel.expandAll();
              //  }
              //  me.expandAll = true;
            //}
        //});
        var me = this;
        Common.ajax({
            component : me.treePanel,
            message : '正在加载......',
            url :ctxp + '/system/role/loadRight?roleId='+id,
            callback : function(result){
                var myStore = Ext.create("Ext.data.TreeStore",{
                        defaultRootId : '',
                        clearOnLoad : true,
                        nodeParam : 'id',
                        fields: [
                            {
                                name: 'id'
                            },
                            {
                                name: 'parentId'
                            },
                            {
                                name: 'sort',
                                type: 'int'
                            },
                            {
                                name: 'iconCls'
                            },
                            {
                                name: 'leaf',
                                type: 'boolean'
                            },
                            {
                                name: 'type'
                            },
                            {
                                name: 'resource'
                            },
                            {
                                name: 'component'
                            },
                            {
                                name: 'text'
                            },
                            {
                                name: 'needCheck',
                                type: 'boolean'
                            },
                            {
                                name: 'checked',
                                type: 'boolean'
                            }
                        ],
                         proxy:
                            {
                                type: 'memory',
                                data: result.rows,
                                reader:{
                                    type: 'json'
                                }
                            }
                        });

            me.treePanel.bindStore(myStore);
            myStore.reload();
            me.treePanel.expandAll();
            Ext.defer(function()
                 {
                     me.treePanel.expandAll();
                  }, 1000);
            }
        });
    }

});