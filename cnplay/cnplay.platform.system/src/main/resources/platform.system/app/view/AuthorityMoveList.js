/*
 * File: app/view/AuthorityMoveList.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.system.view.AuthorityMoveList', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.AuthorityMoveList',

    requires: [
        'platform.system.view.DateTegion',
        'Ext.button.Button',
        'Ext.form.Panel',
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.selection.CheckboxModel',
        'Ext.toolbar.Paging',
        'Ext.form.field.ComboBox'
    ],

    title: '转授权管理',
    forceFit: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'icon-search',
                            text: '查询',
                            listeners: {
                                click: {
                                    fn: me.onButtonSoClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonSoAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-add',
                            text: '添加',
                            listeners: {
                                click: {
                                    fn: me.onButtonNewClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonNewAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-edit',
                            text: '修改',
                            listeners: {
                                afterrender: {
                                    fn: me.onBtnEditAfterRender,
                                    scope: me
                                },
                                click: {
                                    fn: me.onBtnEditClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-del',
                            text: '撤消',
                            listeners: {
                                click: {
                                    fn: me.onButtonDeleteClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonDeleteAfterRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'form',
                    dock: 'top',
                    border: false,
                    width: 100,
                    layout: 'column',
                    header: false,
                    title: '查询表单',
                    listeners: {
                        afterrender: {
                            fn: me.onFormAfterRender,
                            scope: me
                        }
                    },
                    items: [
                        {
                            xtype: 'DateTegion',
                            label: '授权时间',
                            startDateName: 'fromDate',
                            endDateName: 'toDate',
                            margin: 5,
                            listeners: {
                                beforerender: {
                                    fn: me.onPanelBeforeRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    width: 360,
                    afterPageText: '页，共 {0} 页',
                    beforePageText: '第',
                    displayInfo: true,
                    displayMsg: '第 {0} - {1} 行，共 {2} 行',
                    items: [
                        {
                            xtype: 'combobox',
                            width: 120,
                            fieldLabel: '每页行数',
                            labelAlign: 'right',
                            labelWidth: 60,
                            name: 'pageSize',
                            listeners: {
                                afterrender: {
                                    fn: me.onPageSizeAfterRender,
                                    scope: me
                                },
                                change: {
                                    fn: me.onPageSizeChange,
                                    scope: me
                                }
                            }
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onPagingtoolbarAfterRender,
                            scope: me
                        }
                    }
                }
            ],
            listeners: {
                selectionchange: {
                    fn: me.onGridpanelSelectionChange,
                    scope: me
                },
                afterrender: {
                    fn: me.onGridpanelAfterRender,
                    scope: me
                }
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    width: 100,
                    defaultWidth: 150,
                    dataIndex: 'fromUserName',
                    text: '授权人'
                },
                {
                    xtype: 'gridcolumn',
                    width: 100,
                    dataIndex: 'toUserName',
                    text: '被授权人'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'startTimeStr',
                    text: '开始时间'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'endTimeStr',
                    text: '结束时间'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(value=='Normal'){
                            return "正常";
                        }else if(value=="Banned"){
                            return "过期";
                        }else if(value=="Delete"){
                            return "撤消";
                        }else{
                            return value;
                        }
                    },
                    width: 120,
                    dataIndex: 'status',
                    text: '状态'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'createTimeStr',
                    text: '创建时间'
                }
            ],
            selModel: Ext.create('Ext.selection.CheckboxModel', {
                listeners: {
                    selectionchange: {
                        fn: me.onCheckboxModelSelectionChange,
                        scope: me
                    }
                }
            })
        });

        me.callParent(arguments);
    },

    onButtonSoClick: function(button, e, eOpts) {
        if(this.dateTegion.validate())
        {
             this.loadGrid();
        }
    },

    onButtonSoAfterRender: function(component, eOpts) {
        //Common.hidden({params : {url:'/system/role/list'},component:component});
    },

    onButtonNewClick: function(button, e, eOpts) {
        this.showForm('');
    },

    onButtonNewAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/manage/authority/save'},component:component});
    },

    onBtnEditAfterRender: function(component, eOpts) {
        this.btnEdit = component;
        Common.hidden({params : {url:'/manage/authority/save'},component:component});
    },

    onBtnEditClick: function(button, e, eOpts) {
        var me = this;
        var selected = this.getSelectionModel().selected.items;
        if(selected.length===1){
            Common.ajax({
                url:ctxp+'/manage/authority/loadById',
                params:{id:selected[0].data.id},
                callback:function(result){
                    me.showForm(selected[0].data.id);

                }
            });
        }else{
            Common.alert({msg:'修改操作请选择且只选择一条记录'});
        }
    },

    onButtonDeleteClick: function(button, e, eOpts) {
        Common.ajaxSelectionIds({
                component:this,
                url:ctxp+'/manage/authority/cancel',
                msg:'撤消成功',
                confirm:'确定要撤消选中的数据吗？'
            });
    },

    onButtonDeleteAfterRender: function(component, eOpts) {
        this.btnDel = component;
        Common.hidden({params : {url:'/manage/authority/cancel'},component:component});
    },

    onFormAfterRender: function(component, eOpts) {
        this.form = component;
    },

    onPanelBeforeRender: function(component, eOpts) {
        this.dateTegion = component;
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {

        this.btnDel.setDisabled(selected.length === 0);
    },

    onGridpanelAfterRender: function(component, eOpts) {
        this.loadGrid();
    },

    onCheckboxModelSelectionChange: function(model, selected, eOpts) {
        var selections = model.selected.items;
        if(selections.length===1){
            this.btnEdit.setDisabled(false);
        }else{
            this.btnEdit.setDisabled(true);
        }
    },

    onPageSizeAfterRender: function(component, eOpts) {
        this.pageSize = component;
        Common.bindPageSize(component);
    },

    onPageSizeChange: function(field, newValue, oldValue, eOpts) {
        try{
            if(!Ext.isEmpty(this.pagingToolbar))
            {
                this.loadGrid();
            }
        }
        catch(error)
        {
        }
    },

    onPagingtoolbarAfterRender: function(component, eOpts) {
        this.pagingToolbar = component;
    },

    loadGrid: function() {
        var params = this.form.getForm().getValues();
        Common.loadStore({
            component:this,
            url:ctxp + '/manage/authority/list',
            pageSize:this.pageSize.getValue(),
            fields: ['id','createTimeStr', 'fromUserName', 'toUserName', 'startTimeStr','endTimeStr','status'],
            params:params
        });
    },

    showForm: function(id) {

        try
        {

            var me = this;
            var formwin = Ext.create('platform.system.view.AuthorityMoveWin');
            formwin.addListener('close', function(panel,opts)
                                {
                                    me.getStore().reload();
                                });
            formwin.show();
            formwin.loadForm(id);
        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }

    }

});