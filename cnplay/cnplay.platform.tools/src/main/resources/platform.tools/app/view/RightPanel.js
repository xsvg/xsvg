/*
 * File: app/view/RightPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('platform.tools.view.RightPanel', {
    extend: 'Ext.tree.Panel',
    alias: 'widget.treegrid',

    requires: [
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.tree.Column',
        'Ext.grid.column.Boolean',
        'Ext.tree.View'
    ],

    autoRender: true,
    autoScroll: true,
    forceFit: true,
    rootVisible: false,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'icon-edit',
                            text: '修改',
                            listeners: {
                                click: {
                                    fn: me.onEditButtonClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onButtonAfterRender,
                                    single: true,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-del',
                            text: '删除',
                            listeners: {
                                click: {
                                    fn: me.onDelButtonClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onDelButtonAfterRender,
                                    single: true,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            disabled: true,
                            iconCls: 'icon-sys-config',
                            text: '菜单互斥',
                            listeners: {
                                afterrender: {
                                    fn: me.onBtnRejectAfterRender,
                                    scope: me
                                },
                                click: {
                                    fn: me.onBtnRejectClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'icon-reset',
                            text: '重置功能',
                            listeners: {
                                click: {
                                    fn: me.onResetButtonClick,
                                    scope: me
                                },
                                afterrender: {
                                    fn: me.onResetButtonAfterRender,
                                    single: true,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'treecolumn',
                    width: 150,
                    dataIndex: 'text',
                    text: '菜单名称',
                    flex: 1
                },
                {
                    xtype: 'gridcolumn',
                    width: 200,
                    dataIndex: 'url',
                    text: '访问地址'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'component',
                    text: '控件名称'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'resource',
                    text: '权限资源'
                },
                {
                    xtype: 'booleancolumn',
                    align: 'center',
                    dataIndex: 'needCheck',
                    text: '是否需复核',
                    falseText: '否',
                    trueText: '是'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    dataIndex: 'statusStr',
                    text: '功能状态'
                },
                {
                    xtype: 'gridcolumn',
                    align: 'right',
                    dataIndex: 'sort',
                    text: '排列顺序'
                },
                {
                    xtype: 'gridcolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'createTimeStr',
                    text: '创建时间'
                },
                {
                    xtype: 'gridcolumn',
                    width: 80,
                    align: 'center',
                    dataIndex: 'updateTimeStr',
                    text: '最后更新'
                }
            ],
            viewConfig: {
                listeners: {
                    itemclick: {
                        fn: me.onViewItemClick,
                        scope: me
                    }
                }
            },
            listeners: {
                afterrender: {
                    fn: me.onTreepanelAfterRender,
                    single: true,
                    scope: me
                }
            }
        });

        me.callParent(arguments);
    },

    onEditButtonClick: function(button, e, eOpts) {
        var selected  = this.getSelectionModel().selected.items;
        if(selected.length!=1){
            Common.alert({title:'提示',msg:'请选择一行!'});
            return;
        }
        try
        {
            var me = this;
            var formwin = Ext.create('platform.tools.view.RightWindow');
            formwin.addListener('close', function(panel,opts)
                                {
                                    me.loadGrid();
                                });
            formwin.show();
            formwin.loadFormData(selected[0].data.id);
        }
        catch(error)
        {
            Common.show({title:'信息提示',html:error.toString()});
        }
    },

    onButtonAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/ptools/right/save'},component:component});
    },

    onDelButtonClick: function(button, e, eOpts) {
        Common.deleteSelectionIds(this,ctxp+'/ptools/right/remove');
    },

    onDelButtonAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/ptools/right/remove'},component:component});
    },

    onBtnRejectAfterRender: function(component, eOpts) {
        this.btnReject = component;
    },

    onBtnRejectClick: function(button, e, eOpts) {
        var selected  = this.getSelectionModel().selected.items[0].data;
        if(selected.type=='URL'||selected.type=='COMPONENT'||selected.type=='BUTTON'){
          try
            {

                var formwin = Ext.create('platform.tools.view.RightRejectWindow');
                    formwin.show();
                formwin.loadForm(selected.id);
            }
            catch(error)
            {
                Common.show({title:'信息提示',html:error.toString()});
            }
        }
    },

    onResetButtonClick: function(button, e, eOpts) {
        var me = this;
        Common.ajax({
            component:me,
            message:'正在提交...',
            url:ctxp+'/ptools/right/reload',
            callback:function(json,options,success,response){
                try{
                    Common.alert({title : '操作提示',
                                  msg : json.rows,
                                  icon : Ext.MessageBox.INFO
                                 });
                    if(json.success){
                        me.loadGrid();
                    }
                }catch(e){}
            }
        });
    },

    onResetButtonAfterRender: function(component, eOpts) {
        Common.hidden({params : {url:'/ptools/right/reload'},component:component});
    },

    onViewItemClick: function(dataview, record, item, index, e, eOpts) {
        if(record.data.type=='URL'||record.data.type=='COMPONENT'||record.data.type=='BUTTON'){
            this.btnReject.setDisabled(false);
        }else{
            this.btnReject.setDisabled(true);
        }
    },

    onTreepanelAfterRender: function(component, eOpts) {
        this.loadGrid();
    },

    loadGrid: function() {
        try{
            var fields = [ {
                name : 'id'
            }, {
                name : 'sort',
                type : 'int'
            }, {
                name : 'leaf',
                type : 'boolean'
            }, 'text','id','parentId','url','needCheck','type','status','statusStr','createTimeStr','updateTimeStr','component','resource','iconCls','icon' ];
            var me = this;
            Common.bindTree({
                pid:'',
                fields:fields,
                url : ctxp+'/ptools/right/list',
                treePanel:me
            });
        }catch(ex){
            alert(ex);
        }
        this.btnReject.setDisabled(true);
    }

});